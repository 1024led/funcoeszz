# ----------------------------------------------------------------------------
# Calcula porcentagens.
# Se informado um número, mostra sua tabela de porcentagens.
# Se informados dois números, mostra a porcentagem relativa entre eles.
# Se informados um número e uma porcentagem, mostra os valores da porcentagem.
#
# Autor: Aurélio Jargas <verde (a) aurelio net>
# Versão: 3
# Uso: zzporcento valor [valor|porcentagem%]
# Ex.: zzporcento 500           # Tabela de porcentagens de 500
#      zzporcento 500.0000      # Tabela para número fracionário (.)
#      zzporcento 500,0000      # Tabela para número fracionário (,)
#      zzporcento 5.000,00      # Tabela para valor monetário
#      zzporcento 500 25        # Mostra a porcentagem de 25 para 500 (5%)
#      zzporcento 500 1000      # Mostra a porcentagem de 1000 para 500 (200%)
#      zzporcento 500,00 25%    # Mostra quanto é 25% de 500,00
#      zzporcento 500,00 2,5%   # Mostra quanto é 2,5% de 500,00
# ----------------------------------------------------------------------------
zzporcento ()
{
	zzzz -h porcento $1 && return

	local i porcentagem

	local valor1=$1
	local valor2=$2
	local separador=','
	local escala=0
	local tabela='200 150 125 100 90 80 75 70 60 50 40 30 25 20 15 10 9 8 7 6 5 4 3 2 1'

	### Vamos analisar o primeiro valor
	
	# Número fracionário (1.2345 ou 1,2345)
	if zztool testa_numero_fracionario $valor1
	then
		separador=$(echo $valor1 | tr -d 0-9)
		escala=$(echo $valor1 | sed 's/.*[.,]//')
		escala=${#escala}

		# Sempre usar o ponto como separador interno (para os cálculos)
		valor1=$(echo $valor1 | sed 'y/,/./')

	# Dinheiro
	elif zztool testa_dinheiro $valor1
	then
		escala=2
		separador=','

		# Sempre usar o ponto como separador interno (para os cálculos)
		valor1=$(echo $valor1 | sed 's/\.//g ; s/,/./')

	# Número inteiro ou erro
	elif ! zztool testa_numero $valor1
	then
		zztool uso porcento
		return
	fi

	### Vamos analisar o segundo valor

	# O segundo argumento é uma porcentagem
	if test $# -eq 2 && zztool grep_var % $valor2
	then
		# O valor da porcentagem é guardado sem o caractere %
		porcentagem=$(echo $valor2 | tr -d %)
		# Sempre usar o ponto como separador interno (para os cálculos)			
		porcentagem=$(echo $porcentagem | sed 'y/,/./')

		# Porcentagem fracionada
		if zztool testa_numero_fracionario $porcentagem
		then
			# Se o valor é inteiro (escala=0) e a porcentagem fracionária,
			# é preciso forçar uma escala para que o resultado apareça correto.
			test $escala -eq 0 && escala=2 valor1=$valor1.00			

		# Porcentagem inteira ou erro
		elif ! zztool testa_numero $porcentagem
		then
			echo "O valor da porcentagem deve ser um número. Exemplos: 2 ou 2,5."
			return
		fi

	# O segundo argumento é um número
	elif test $# -eq 2
	then
		# Ao mostrar a porcentagem entre dois números, a escala é fixa
		escala=2

		# O separador do segundo número é quem "manda" na saída
		# Sempre usar o ponto como separador interno (para os cálculos)

		# Número fracionário
		if zztool testa_numero_fracionario $valor2
		then
			separador=$(echo $valor2 | tr -d 0-9)
			valor2=$(echo $valor2 | sed 'y/,/./')

		# Dinheiro
		elif zztool testa_dinheiro $valor2
		then
			separador=','
			valor2=$(echo $valor2 | sed 's/\.//g ; s/,/./')

		# Número normal ou erro
		elif ! zztool testa_numero $valor2
		then
			zztool uso porcento
			return
		fi
	fi

	# Ok. Dados coletados, analisados e formatados. Agora é hora dos cálculos.

	# Mostra tabela
	if test $# -eq 1
	then
		for i in $tabela
		do
			printf "%s%%\t%s\n" $i $(echo "scale=$escala; $valor1*$i/100" | bc)
		done

	# Mostra porcentagem
	elif test $# -eq 2
	then
		# Mostra a porcentagem relativa entre dois números
		if ! zztool grep_var % $valor2
		then
			echo "scale=$escala; $valor2*100/$valor1" | bc | sed 's/$/%/'

		# Mostra valores para a porcentagem informada
		else
			printf "%s%%\t%s\n" +$porcentagem $(echo "scale=$escala; $valor1+$valor1*$porcentagem/100" | bc)
			printf "%s%%\t%s\n"  100          $valor1
			printf "%s%%\t%s\n" -$porcentagem $(echo "scale=$escala; $valor1-$valor1*$porcentagem/100" | bc)
			echo
			printf "%s%%\t%s\n"  $porcentagem $(echo "scale=$escala; $valor1*$porcentagem/100" | bc)
		fi
	fi |

	# Assegura 0.123 (em vez de .123) e restaura o separador original
	sed "s/\([^0-9]\)\./\10./ ; y/./$separador/"
}
